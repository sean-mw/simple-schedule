datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String     @id @default(uuid())
    name          String
    email         String?    @unique
    emailVerified DateTime?  @map("email_verified")
    image         String?
    password      String?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    employees     Employee[]
    Account       Account[]
    Session       Session[]

    @@map("users")
}

model Employee {
    id             Int    @id @default(autoincrement())
    email          String
    firstName      String
    lastName       String
    employeeNumber Int?
    userId         String

    user User @relation(fields: [userId], references: [id])

    @@unique([email, userId])
    @@unique([employeeNumber, userId])
}

model Availability {
    id        Int      @id @default(autoincrement())
    day       DateTime
    startTime DateTime
    endTime   DateTime
    token     String

    @@index([token])
}

model AvailabilityRequest {
    id    Int    @id @default(autoincrement())
    token String @unique
    email String
}

model Account {
    id                String   @id @default(cuid())
    userId            String   @map("user_id")
    type              String?
    provider          String
    providerAccountId String   @map("provider_account_id")
    token_type        String?
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    scope             String?
    id_token          String?  @db.Text
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    userId       String?  @map("user_id")
    sessionToken String   @unique @map("session_token") @db.Text
    accessToken  String?  @map("access_token") @db.Text
    expires      DateTime
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@map("sessions")
}

model VerificationRequest {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}
